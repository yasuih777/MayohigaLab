[
  {
    "objectID": "qmds/posts/20250209_virus_simulation_1/simulation.html",
    "href": "qmds/posts/20250209_virus_simulation_1/simulation.html",
    "title": "ウイルス感染症の数理シミュレーション（基礎）: 補足資料",
    "section": "",
    "text": "Julia言語で書いている\n\nusing DifferentialEquations\nusing ModelingToolkit\nusing Plots\n\n\n指数方程式\n\nlet\n1    t::Vector{Float64} = Vector(0:0.001:3)\n    \n2    G::Float64 = 1.5\n    Vi_0::Float64 = 2.0 * 10^3\n    Vi_t::Vector{Float64} = Vi_0 * exp.(G * t)\n    t_D::Float64 = log(2) / G\n    \n    inc_plot = plot(\n        t,\n        Vi_t,\n        label=\"V(t)\",\n        color=\"red\",\n        title=\"Increase virus\",\n        xlabel=\"Day\",\n        ylabel=\"Virus\",\n    )\n    vline!(\n        inc_plot,\n        [t_D],\n        color=\"black\",\n        linestyle=:dash,\n        label=\"tD\",\n    )\n    \n3    D::Float64 = 1.5\n    Vd_0::Float64 = 2.0 * 10^3\n    Vd_t::Vector{Float64} = Vd_0 * exp.(-D * t)\n    t_H::Float64 = log(2) / D\n    \n    dec_plot = plot(\n        t,\n        Vd_t,\n        label=\"V(t)\",\n        color=:blue,\n        title=\"Decrease virus\",\n        xlabel=\"Day\",\n        ylabel=\"Virus\",\n    )\n    vline!(\n        dec_plot,\n        [t_H],\n        color=:black,\n        linestyle=:dash,\n        label=\"tH\",\n    )\n    \n    plot(\n        inc_plot,\n        dec_plot,\n        size=(800, 300),\n        left_margin = 20Plots.px,\n        bottom_margin = 20Plots.px,\n    )\nend\n\n\n1\n\n時刻の定義\n\n2\n\n増加指数方程式の記述\n\n3\n\n減少指数方程式の記述\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: 指数方程式\n\n\n\n\n\n\nロジスティック方程式\n\nlet\n1    t::Vector{Float64} = Vector(0:0.0001:0.5)\n    \n2    function logit_eq(\n        t::Vector{Float64},\n        V_0::Float64;\n        G::Float64=50.0,\n        K_v::Float64=5.0 * 10^6,\n    )\n        return (\n            (V_0 * K_v * exp.(G * t))\n            ./ (K_v .- V_0 .+ V_0 * exp.(G * t))\n        )\n    end\n    \n    logit_plot = plot(\n        t,\n        [\n            logit_eq(t, 1.0 * 10^7),\n            logit_eq(t, 2.5 * 10^6),\n            logit_eq(t, 1.0),\n        ],\n        title=\"Logistics equation\",\n        xlabel=\"Day\",\n        ylabel=\"Virus\",\n        label=[\n            \"V(0): 1.0 * 10^7\" \"V(0): 2.5 * 10^6\" \"V(0): 1.0\"\n        ],\n        ylim=(0, 1.0 * 10 ^ 7),\n    )\n    \n    plot(\n        logit_plot,\n        size=(400, 400),\n        left_margin = 20Plots.px,\n        bottom_margin = 20Plots.px,\n    )\nend\n\n\n1\n\n時刻の定義\n\n2\n\nロジスティック方程式の定義\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: ロジスティック方程式: K_V=5.0 * 10^6\n\n\n\n\n\n\n線形微分方程式\n\nlet\n1    t::Vector{Float64} = Vector(0:0.001:10)\n    \n2    function liner_simultaneous_eq(\n        t::Vector{Float64},\n        beta::Float64,\n        delta::Float64,\n        p::Float64,\n        c::Float64;\n        T_0::Float64=3.7 * 10^5,\n        I_0::Float64=1.0,\n        V_0::Float64=100.0,\n    )\n        theta_1 = (-(delta + c) + sqrt((delta - c)^2 + 4 * beta * p * T_0)) / 2\n        theta_2 = (-(delta + c) - sqrt((delta - c)^2 + 4 * beta * p * T_0)) / 2\n        I_t = (\n            ((beta * T_0 * V_0) - (delta + theta_2) * I_0) / (theta_1 - theta_2)\n            * (exp.(theta_1 * t) - exp.(theta_2 * t))\n        ) + I_0 * exp.(theta_2 * t)\n        V_t = (\n            ((p * I_0) - (c + theta_2) * I_0) / (theta_1 - theta_2)\n            * (exp.(theta_1 * t) - exp.(theta_2 * t))\n        ) + V_0 * exp.(theta_2 * t)\n        return I_t, V_t\n    end\n    \n    I_t, V_t = liner_simultaneous_eq(t, 1.0 * 10^-7, 1.0, 1.0 * 10^3, 10.0)\n    liner_plot = plot(\n        t,\n        [I_t, V_t],\n        title=\"Logistics equation\",\n        xlabel=\"Day\",\n        yscale=:log10,\n        label=[\"infected cell (R0 &gt; 1)\" \"virus (R0 &gt; 1)\"],\n        color=:red,\n        linestyle=[:solid :dash],\n    )\n    I_t, V_t = liner_simultaneous_eq(t, 1.0 * 10^-13, 1.0, 1.0 * 10^3, 10.0)\n    plot!(\n        liner_plot,\n        t,\n        [I_t, V_t],\n        title=\"Logistics equation\",\n        xlabel=\"Day\",\n        yscale=:log10,\n        label=[\"infected cell (R0 &lt; 1)\" \"virus (R0 &lt; 1)\"],\n        color=:blue,\n        linestyle=[:solid :dash],\n    )\n    \n    plot(\n        liner_plot,\n        size=(600, 400),\n        left_margin = 20Plots.px,\n        bottom_margin = 20Plots.px,\n        legend=:outertopright,\n    )\nend\n\n\n1\n\n時刻の定義\n\n2\n\n線形微方程式の定義\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: 線形微分方程式\n\n\n\n\n\n\n非線形微分方程式\n\nlet\n1    @variables t T(t)=6.4*10^6 I(t)=0.1 V(t)=5.0*10^4\n2    @parameters λ=0.0 d=0.05 β=8.6*10^-11 δ=1.75+0.05 p=3.0*10^4 c=1.93\n\n    D = Differential(t)\n3    eqs = [\n        D(T) ~ λ - d * T - β * T * V\n        D(I) ~ β * T * V - δ * I\n        D(V) ~ p * I - c * V\n    ]\n    @mtkbuild sys = ODESystem(eqs, t)\n\n4    tspan = (0.0, 25.0)\n5    prob = ODEProblem(sys, [], tspan)\n    sol = solve(prob)\n\n    cell_plot = plot(\n        sol[t],\n        [sol[T], sol[I]],\n        title=\"Cell dinamics\",\n        xlabel=\"Day\",\n        ylabel=\"Cell\",\n        yscale=:log10,\n        label=[\"target\" \"infected\"],\n        color=[:blue :red],\n    )\n    virus_plot = plot(\n        sol[t],\n        sol[V],\n        title=\"Virus dinamics\",\n        xlabel=\"Day\",\n        ylabel=\"Virus\",\n        label=\"Virus\",\n        yscale=:log10,\n        color=:black,\n    )\n    \n    plot(\n        cell_plot,\n        virus_plot,\n        size=(800, 400),\n        left_margin = 20Plots.px,\n        bottom_margin = 20Plots.px,\n    )\nend\n\n\n1\n\n初期値の設定\n\n2\n\nパラメータの設定\n\n3\n\n微分方程式の定義\n\n4\n\n時間軸の設定\n\n5\n\n微分方程式の逐次計算\n\n\n\n\n┌ Warning: Independent variable t should be defined with @independent_variables t.\n└ @ ModelingToolkit ~/.julia/packages/ModelingToolkit/K8zNC/src/utils.jl:119\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: 非線形微分方程式\n\n\n\n\n\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "qmds/posts/20250202_docker_system/index.html",
    "href": "qmds/posts/20250202_docker_system/index.html",
    "title": "QuartoでWebページを作る際のDocker構成について",
    "section": "",
    "text": "概要\n本ブログでは実行環境をDockerで作成している。コードは↓のGithubリンクから参照できる。\n\nDockerFile\ndokcer-compose\n\n\n\nツール\n\n\n\n\n\n\nWarning\n\n\n\n前もってDocker CLIをインストールしておく。\n※ローカルのターミナル上でdocker、docker composeが動作すれば良い。\n\n\nQuarto websiteを作る上で導入したツールは以下の4つ。\n\nQuarto\n+αでJupyterを動かす場合\n\nR\nPython\nJulia\n\n\nR, Python, Juliaの仮想環境は、公式がサポートしているものを使う。\n\nR: renv\nPython: venv\n\nPoetryを併用して仮想環境を作成する\n\nJulia: Pkg\n\n\n\n\n\n\n\nTip\n\n\n\nデータサイエンス用のプラットフォームであるCondaもQuarto上でサポートされているが、複数の言語を混ぜて使う際に激しめのコンフリクトを起こした。なので、今回はそれぞれの言語専用の仕組みを使用した。\n\n\n\n\nDockerfileの構成\nベースイメージはubuntuを使用する\nFROM ubuntu:latest\n\n\n\n\n\n\nTip\n\n\n\nPythonやRを一気にビルドするベースイメージとして、jupyter/datascience-notebookがある。 実際に試してみたが、Quartoと併用するときに上手く扱えなかった。そこで、まっさらなubuntuイメージから愚直にインストールしていく構成をとった。\n\n\nrenv, pyproject.toml, Project.tomlの構成をDocker内にコピーする。\nCOPY . /web_source/\n\n\n\n\n\n\nCaution\n\n\n\nメモリの節約においては仮想環境用ファイル以外はコピーしなくてよいが、面倒なのでやっていない。今後のTODOとする。\n\n\nubuntu側で必要なツールをインストールする。 同時にRとPython(pip)をインストールする。\nRUN apt update \\\n    && cd /web_source \\\n    && apt install -y --no-install-recommends \\\n        curl \\\n        gdebi \\\n        build-essential \\\n        r-base \\\n        pip \\\n    && rm -rf /var/lib/apt/lists/* \\\nRの仮想環境ビルドのため、renvをインストールする。 加えて、仮想環境を再現する。\n# RUN\n   && Rscript -e 'install.packages(\"renv\", repos=\"https://cloud.r-project.org\"); renv::restore(); renv::repair()' \\\nPythonの仮想環境ビルドのため、Poetryをインストールする。 加えて、仮想環境を再現する。\n# RUN\n    && pip install poetry --break-system-packages \\\n    && poetry config --local virtualenvs.in-project true \\\n    && poetry install \\\nJuliaをインストールする。 加えて、仮想環境を再現する。\n# RUN\n    && curl -fsSL https://install.julialang.org | sh -s -- -y \\\n    && /root/.juliaup/bin/julia --project=@. -e 'using Pkg; Pkg.instantiate(); Pkg.precompile()' \\\n\n\n\n\n\n\nTip\n\n\n\nJuliaダウンロード直後はjuliaコマンドが動かなかった(多分PATHの問題)ため、ファイルから実行している。\n\n\nQuartoをインストールする。\n※インストーラーは最後に削除する。\n# RUN\n    && curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb \\\n    && gdebi --non-interactive quarto-linux-amd64.deb \\\n    && rm -rf quarto-linux-amd64.deb\nこの構成のDockerfileをbuildすることで、必要な環境が全て入ったDocker containerを作成できる。\n\n\ndocker-composeの構成\n特別な工夫はしておらず、Dockerに入ったときに作業中のディレクトリ(web_source)とローカルのディレクトリ構成をリンクさせる設定にしている。\n\n\n\n\n\n\nCaution\n\n\n\nlocalhostをローカル側に移す方法がいまいち分からず、Docker内でのJupyter notebook起動やQuarto previewが出来ない。理解が進んだら修正する。\n\n\n\n\nDocker内のQuarto環境\nquarto checkで確認すると、Python, R, Julia全てが認識できている。\n※Poetryをactivateしてから実行する。\n\n\nCode\n!poetry run quarto check\n\n\nQuarto 1.6.40\n[✓] Checking environment information...\n      Quarto cache location: /root/.cache/quarto\n[✓] Checking versions of quarto binary dependencies...\n      Pandoc version 3.4.0: OK\n      Dart Sass version 1.70.0: OK\n      Deno version 1.46.3: OK\n      Typst version 0.11.0: OK\n[✓] Checking versions of quarto dependencies......OK\n[✓] Checking Quarto installation......OK\n      Version: 1.6.40\n      Path: /opt/quarto/bin\n\n(|) Checking tools....................(/) Checking tools....................[✓] Checking tools....................OK\n      TinyTeX: (not installed)\n      Chromium: (not installed)\n\n[✓] Checking LaTeX....................OK\n      Tex:  (not detected)\n\n(|) Checking basic markdown render....(/) Checking basic markdown render....(-) Checking basic markdown render....(\\) Checking basic markdown render....(|) Checking basic markdown render....(/) Checking basic markdown render....(-) Checking basic markdown render....(\\) Checking basic markdown render....(|) Checking basic markdown render....(/) Checking basic markdown render....[✓] Checking basic markdown render....OK\n\n(|) Checking Python 3 installation....[✓] Checking Python 3 installation....OK\n      Version: 3.12.3\n      Path: /web_source/.venv/bin/python3\n      Jupyter: 5.7.2\n      Kernels: python3, julia-1.11\n\n(|) Checking Jupyter engine render....(/) Checking Jupyter engine render....(-) Checking Jupyter engine render....(\\) Checking Jupyter engine render....(|) Checking Jupyter engine render....(/) Checking Jupyter engine render....(-) Checking Jupyter engine render....(\\) Checking Jupyter engine render....(|) Checking Jupyter engine render....(/) Checking Jupyter engine render....(-) Checking Jupyter engine render....(\\) Checking Jupyter engine render....(|) Checking Jupyter engine render....(/) Checking Jupyter engine render....(-) Checking Jupyter engine render....(\\) Checking Jupyter engine render....(|) Checking Jupyter engine render....(/) Checking Jupyter engine render....(-) Checking Jupyter engine render....(\\) Checking Jupyter engine render....(|) Checking Jupyter engine render....(/) Checking Jupyter engine render....(-) Checking Jupyter engine render....[✓] Checking Jupyter engine render....OK\n\n(|) Checking R installation...........(/) Checking R installation...........(-) Checking R installation...........(\\) Checking R installation...........(|) Checking R installation...........(/) Checking R installation...........(-) Checking R installation...........(\\) Checking R installation...........(|) Checking R installation...........(/) Checking R installation...........(-) Checking R installation...........(\\) Checking R installation...........(|) Checking R installation...........(/) Checking R installation...........[✓] Checking R installation...........OK\n      Version: 4.3.3\n      Path: /usr/lib/R\n      LibPaths:\n        - /web_source/renv/library/R-4.3/x86_64-pc-linux-gnu\n        - /root/.cache/R/renv/sandbox/R-4.3/x86_64-pc-linux-gnu/9a444a72\n      knitr: 1.49\n      rmarkdown: 2.29\n\n(|) Checking Knitr engine render......(/) Checking Knitr engine render......(-) Checking Knitr engine render......(\\) Checking Knitr engine render......(|) Checking Knitr engine render......(/) Checking Knitr engine render......(-) Checking Knitr engine render......(\\) Checking Knitr engine render......(|) Checking Knitr engine render......(/) Checking Knitr engine render......(-) Checking Knitr engine render......(\\) Checking Knitr engine render......(|) Checking Knitr engine render......(/) Checking Knitr engine render......(-) Checking Knitr engine render......(\\) Checking Knitr engine render......(|) Checking Knitr engine render......(/) Checking Knitr engine render......(-) Checking Knitr engine render......(\\) Checking Knitr engine render......(|) Checking Knitr engine render......(/) Checking Knitr engine render......(-) Checking Knitr engine render......(\\) Checking Knitr engine render......[✓] Checking Knitr engine render......OK\n\n\n\n\n\n参考\n\nM2のMacにDockerとDocker Composeをインストールする\n社内のDockerfileのベストプラクティスを公開します\nDocker Composeについてざっくり理解する【概要 / ymlファイル書き方 / コマンド操作】\n\n\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "qmds/about.html",
    "href": "qmds/about.html",
    "title": "管理者について",
    "section": "",
    "text": "生物統計学と遺伝統計学を頑張りたい人。R&D寄りのデータサイエンティスト。\n\n経歴\n\n熊本県で生まれ育つ\n国立大学の数学科を卒業\n\n解析学(微分積分学)を中心に数学理論を学ぶ\n\n国立大学院の生命科学専攻を修了\n\nWetな手法でエピジェネティクスと初期発生に関する研究を行う\n定量化の方法としては画像解析系の技術を学ぶ\n\n受託分析会社でデータサイエンティストとして勤務\n\nデータ利活用を目的としたコンサルテーションを担当\nBIエンジニアリング, AIエンジニアリング, データ基盤作成, データ分析業を幅広く学ぶ\nプロジェクトリーダーを経験\n\n医療系ベンチャー企業のAIエンジニアとして勤務 ← Now\n\n医療機器に組み込む疾患予測モデルの構築\n社内データ基盤の整備\n臨床研究におけるデータ解析を担当\n\n\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "qmds/posts.html",
    "href": "qmds/posts.html",
    "title": "記事",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nウイルス感染症の数理シミュレーション（基礎）\n\n\n5 min\n\n\n\nJulia\n\n\nSimulation\n\n\n\n\n\n\n\n\n\n\n2025-02-09\n\n\n\n\n\n\n\n\n\n\n\nQuartoでWebページを作る際のDocker構成について\n\n\n2 min\n\n\n\nQuarto\n\n\nDocker\n\n\nR\n\n\nPython\n\n\nJulia\n\n\n\n\n\n\n\n\n\n\n2025-02-02\n\n\n\n\n\n\n\n\nNo matching items\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "qmds/index.html",
    "href": "qmds/index.html",
    "title": "ホーム",
    "section": "",
    "text": "管理者が興味があることを書いていきます。\n\n統計理論の検証\n数値シミュレーション\n学習の忘備録\n\nなどなど"
  },
  {
    "objectID": "qmds/index.html#ブログ内のコンテンツ",
    "href": "qmds/index.html#ブログ内のコンテンツ",
    "title": "ホーム",
    "section": "ブログ内のコンテンツ",
    "text": "ブログ内のコンテンツ\n本サイトにおける各エントリの文章や画像などのコンテンツはクリエイティブ・コモンズ・ライセンスを適応します。"
  },
  {
    "objectID": "qmds/index.html#ブログ内サンプルコードのライセンス",
    "href": "qmds/index.html#ブログ内サンプルコードのライセンス",
    "title": "ホーム",
    "section": "ブログ内サンプルコードのライセンス",
    "text": "ブログ内サンプルコードのライセンス\nブログ内で書いているコードに関しては例外的にMIT Licenceを適応します。\n\n\n\n\n\n\nMIT License\n\n\n\n\n\nCopyright 2025\n以下に定める条件に従い、本ソフトウェアおよび関連文書のファイル（以下「ソフトウェア」）の複製を取得するすべての人に対し、ソフトウェアを無制限に扱うことを無償で許可します。これには、ソフトウェアの複製を使用、複写、変更、結合、掲載、頒布、サブライセンス、および/または販売する権利、およびソフトウェアを提供する相手に同じことを許可する権利も無制限に含まれます。\n上記の著作権表示および本許諾表示を、ソフトウェアのすべての複製または重要な部分に記載するものとします。\nソフトウェアは「現状のまま」で、明示であるか暗黙であるかを問わず、何らの保証もなく提供されます。ここでいう保証とは、商品性、特定の目的への適合性、および権利非侵害についての保証も含みますが、それに限定されるものではありません。 作者または著作権者は、契約行為、不法行為、またはそれ以外であろうと、ソフトウェアに起因または関連し、あるいはソフトウェアの使用またはその他の扱いによって生じる一切の請求、損害、その他の義務について何らの責任も負わないものとします。"
  },
  {
    "objectID": "qmds/contact.html",
    "href": "qmds/contact.html",
    "title": "お問い合わせ",
    "section": "",
    "text": "Google Form\n\n読み込んでいます…\n\n\n\n\n\nReuseCC BY 4.0"
  },
  {
    "objectID": "qmds/posts/draft_imbalance_evalution/experiment.html",
    "href": "qmds/posts/draft_imbalance_evalution/experiment.html",
    "title": "Non title",
    "section": "",
    "text": "ReuseCC BY 4.0"
  },
  {
    "objectID": "qmds/posts/20250209_virus_simulation_1/index.html",
    "href": "qmds/posts/20250209_virus_simulation_1/index.html",
    "title": "ウイルス感染症の数理シミュレーション（基礎）",
    "section": "",
    "text": "ウイルス感染の数理シミュレーションをやってみる。ここでは基礎的な数理モデルを扱う。\n\n指数方程式\nまず、ウイルスと細胞間のシンプルな作用に関するモデルを仮定する。\n\n\n\n\n\n\n\nG\n\n\n\nV\n\nVirus\n\n\n\nVout\n\n\n\n\nV-&gt;Vout\n\n\nremoval\n\n\n\nconVTC2IC\n\n\n\n\nV-&gt;conVTC2IC\n\n\n\n\nTC\n\nTarget cells\n\n\n\nTC-&gt;conVTC2IC\n\n\n\n\nIC\n\nInfected cells\n\n\n\nIC-&gt;V\n\n\nproduction\n\n\n\nconVTC2IC-&gt;IC\n\n\ninfection\n\n\n\n\n\n\n\n\nウイルス感染のごく初期では体内のウイルス量が指数的に増加することが明らかになっている。時刻\\(t\\)におけるウイルス量を\\(V(t)\\)としたとき、Equation 1 の微分方程式で記述でき、一般解も得られる。\nまた、初期ウイルス量が2倍になるまでの時間を倍化時間\\(t_{D}=\\log(2 / G)\\)という。\n\n\\(V(t)\\): ウイルス量\n\\(G\\): 正の定数で、ウイルスの増加率を表す\n\n\\[\n\\begin{align}\n&\\frac{\\partial V(t)}{\\partial t} = G V(t) \\\\\n&V(t) = V(0) \\exp(G t)\n\\end{align}\n\\tag{1}\\]\n一方、ウイルス感染が十分に広がった後に抗ウイルス剤などでウイルスの増加を協力に抑制できたとき、ウイルスが死滅していくことでウイルス量が指数的に減少することが明らかになっている。このとき、Equation 2 の微分方程式で記述でき、同様に一般解も得られる。\nまた、初期ウイルス量が1/2倍になるまでの時間を半減期\\(t_{H}=\\log(2 / D)\\)という。\n\n\\(V(t)\\): ウイルス量\n\\(D\\): 正の定数で、ウイルスの減少率を表す\n\n\\[\n\\begin{align}\n&\\frac{\\partial V(t)}{\\partial t} = -D V(t) \\\\\n&V(t) = V(0) \\exp(-D t)\n\\end{align}\n\\tag{2}\\]\nまた、放出されたウイルスが排除されるまでの平均滞在時間を平均寿命と定義し、方程式 Equation 3 で求められる。\n\\[\n\\int^{\\infty}_{0} s \\exp(-D s) ds = \\frac{1}{D} \\\\\n\\tag{3}\\]\nウイルス量の増加(Equation 1 )および減少(Equation 2 )の指数方程式を描画すると、\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: 指数方程式\n\n\n\n\n\nこれらの指数方程式を利用することで、線形回帰によってウイルス動態のパラメータ推定を行うことができる。Equation 2 を変形すると以下のようになり、\\(-D\\)が回帰係数、\\(V(0)\\)が切片に該当する。\n\\[\n\\log V(t) = \\log V(0) - D t\n\\]\n\n\nロジスティック方程式\n指数方程式ではウイルスと細胞間のシンプルな作用について考えた、ここでは細胞数に上限があり、ウイルスの増殖に制限がかかっているモデルを仮定する。実際は細胞が無限に存在することはないので、こちらの方がリアルな動態を仮定できる。\n\n\n\n\n\n\n\nG\n\n\ncluster_cell\n\nCells size Limited\n\n\n\nV\n\nVirus\n\n\n\nVout\n\n\n\n\nV-&gt;Vout\n\n\nremoval\n\n\n\nconVTC2IC\n\n\n\n\nV-&gt;conVTC2IC\n\n\n\n\nTC\n\nTarget cells\n\n\n\nTC-&gt;conVTC2IC\n\n\n\n\nIC\n\nInfected cells\n\n\n\nIC-&gt;V\n\n\nproduction\n\n\n\nconVTC2IC-&gt;IC\n\n\ninfection\n\n\n\n\n\n\n\n\nウイルスの増殖が進むにつれて標的となる細胞が減ってくるため、ウイルスの増殖速度が低下する。これを微分方程式で表現すると Equation 4 となり、ロジスティック方程式と呼ぶ。これも一般解が得られる。\n\n\n\n\n\n\nTip\n\n\n\n一般解を整理すると、ロジスティック関数が得られる。 \\[\nf(x) = \\frac{1}{1 + \\exp(-x)}\n\\]\n\n\n\n\\(V(t)\\): ウイルス量\n\\(G\\): 正の定数で、内的自然増加率を表す\n\\(K_{V}\\): 正の定数で、環境収容力を表す\n\n環境が維持できる最大ウイルス量\n\n\n\\[\n\\begin{align}\n&\\frac{\\partial V(t)}{\\partial t} = G V(t) \\left(1 - \\frac{V(t)}{K_{V}} \\right) \\\\\n&V(t) = \\frac{V(0) K_{V} \\exp(G t)}{K_{V} - V(0) + V(0) \\exp(G t)}\n\\end{align}\n\\tag{4}\\]\nウイルス量の動態 Equation 4 を描画すると、いずれの初期値でも環境収容力\\(K_{V}\\)に収束していく。\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: ロジスティック方程式: K_V=5.0 * 10^6\n\n\n\n\n\n\n\n線形微分方程式\nロジスティック方程式によって細胞増殖に制限がかかるケースを考えた。今度は、別の視点として免疫系でウイルスが排除される、ウイルスが自然に死亡するなど、感染以外でウイルス量が増減するモデルを仮定する。\n\n\n\n\n\n\n\nG\n\n\n\nV\n\nVirus(V)\n\n\n\nVout\n\n\n\n\nV-&gt;Vout\n\n\nremoval(c)\n\n\n\nconVTC2IC\n\n\n\n\nV-&gt;conVTC2IC\n\n\n\n\nTC\n\nTarget cells(T)\n\n\n\nTC-&gt;conVTC2IC\n\n\n\n\nIC\n\nInfected cells(I)\n\n\n\nIC-&gt;V\n\n\nproduction rate(p)\n\n\n\nICout\n\n\n\n\nIC-&gt;ICout\n\n\nmortality rate(delta)\n\n\n\nconVTC2IC-&gt;IC\n\n\ninfection(beta)\n\n\n\n\n\n\n\n\n時間経過による動態が複数でありかつそれらが相互作用を持つ場合、モデルは連立微分方程式によって記述される。Equation 5 はウイルス量\\(V(t)\\)と感染細胞数\\(V(t)\\)のについて記述した方程式であり、特に線形結合のみなので線形微分方程式と呼ぶ。\n\n\\(I(t)\\): 感染細胞数\n\\(V(t)\\): ウイルス量\n\\(T(0)\\): 標的細胞数(\\(t\\)に寄らず、初期値を維持すると仮定)\n\\(p\\): ウイルスの生産速度\n\\(\\delta\\): 免疫による感染細胞の排除速度\n\\(\\beta\\): ウイルスの感染率\n\\(c\\): 自然応答によるウイルスの排除速度\n\n\\[\n\\begin{align}\n&\\frac{\\partial I(t)}{\\partial t} = \\beta T(0) V(t) - \\delta I(t) \\\\\n&\\frac{\\partial V(t)}{\\partial t} = p I(t) - c V(t)\n\\end{align}\n\\tag{5}\\]\nこれらパラメータにより以下の重要な指標が定義できる。\n\n平均的なウイルス産生期間: \\(1 / \\delta\\)\n1つの感染細胞が生涯に生産するウイルス量: \\(p / \\delta\\)\n\nウイルスバーストサイズと呼ぶ。薬剤効果の定量比較などに用いられる\n\nウイルスバーストサイズによって生み出される新たな感染細胞数: \\(R_{0} = \\beta p T(0) / \\delta c\\)\n\n基本再生産数と呼ぶ。1より大きいとウイルス感染が進み、1より小さければ進行しない\n基本再生産数によって必要なウイルス阻害率を見積もることができる\n\n\nEquation 5 を行列に変換し、その固有値\\(\\theta_{1}, \\theta_{2}\\)を利用することで一般解 Equation 6 を求めることができる。\n\\[\n\\begin{align}\n&\\theta_{1} = \\frac{-(\\delta + c) + \\sqrt{(\\delta - c)^{2} + 4 \\beta p T(0)}}{2} \\\\\n&\\theta_{2} = \\frac{-(\\delta + c) - \\sqrt{(\\delta - c)^{2} + 4 \\beta p T(0)}}{2} \\\\\n&I(t) = \\frac{\\beta T(0) V(0) - (\\delta + \\theta_{2}) I(0)}{\\theta_{1} - \\theta_{2}} (e^{\\theta_{1} t} - e^{\\theta_{2} t}) + I(0) e^{\\theta_{2} t} \\\\\n&V(t) = \\frac{p I(0) - (c + \\theta_{2}) I(0)}{\\theta_{1} - \\theta_{2}} (e^{\\theta_{1} t} - e^{\\theta_{2} t}) + V(0) e^{\\theta_{2} t} \\\\\n\\end{align}\n\\tag{6}\\]\n基本再生産数\\(R0\\)が1より小さい場合\\(\\theta_{1}, \\theta_{2} &lt; 0\\)なので\\(I(t), V(t)\\)はともに正に発散する、基本再生産数\\(R0\\)が1より大きい場合\\(\\theta_{1} &gt; 0, \\theta_{2} &lt; 0\\)なので\\(I(t), V(t)\\)はともに負に発散する。\n\n\n\n\n\n\nマルサス係数\n\n\n\n加えて、固有値\\(\\theta_{1}, \\theta_{2}\\)の最大値(\\(\\theta_{1}\\))をマルサス係数\\(M\\)と呼ぶ。マルサス係数が0より大きい場合力学系は正に発散し、マルサス係数が0より小さい場合力学系は負に発散する。\n\n\nこれを描画すると、基本再生産数の条件によって感染細胞数とウイルス量の増減の向きが変わることが確認できる。\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: 線形微分方程式\n\n\n\n\n\n\n\n\n\n\n\n準定常状態近似\n\n\n\n通常、生体内においてはウイルス除去率\\(c\\)は感染細胞排除率\\(\\delta\\)よりも十分に大きい\\(c \\gg \\delta\\)と仮定する。\nさらに、準定常状態\\(0 \\simeq p I(t) - c V(t) \\Rightarrow V(t) = p I(t) / c\\)においては、\\(\\theta_{1} = p \\beta T(0) / c - \\delta\\)であり、以下のように変形できる。\n\\[\n\\frac{\\partial V(t)}{\\partial t} = \\left( \\frac{p \\beta T(0)}{c} - \\delta \\right) V(t) \\Rightarrow \\frac{\\partial V(t)}{\\partial t} = M V(t)\n\\]\nこれは、Equation 1 、Equation 2 である。このようにモデルを単純化することによって、多くの場合解釈性の高い考察を得ることができる。\n\n\n\n\n非線形微分方程式\n線形微分方程式によってウイルス量に感染細胞の相互作用を加え、動態がどうなるかを考えた。しかし、標的細胞については時間経過によらない過程を与えた単純なものであった。なので、標的細胞の相互作用も加えたより現実に近いモデルを仮定する。\n\n\n\n\n\n\n\nG\n\n\n\nV\n\nVirus(V)\n\n\n\nVout\n\n\n\n\nV-&gt;Vout\n\n\nremoval(c)\n\n\n\nconVTC2IC\n\n\n\n\nV-&gt;conVTC2IC\n\n\n\n\nTCout\n\n\n\n\nTC\n\nTarget cells(T)\n\n\n\nTCout-&gt;TC\n\n\nproduct(lambda)\n\n\n\nTC-&gt;TCout\n\n\ndead(d)\n\n\n\nTC-&gt;conVTC2IC\n\n\n\n\nIC\n\nInfected cells(I)\n\n\n\nIC-&gt;V\n\n\nproduction rate(p)\n\n\n\nICout\n\n\n\n\nIC-&gt;ICout\n\n\nmortality rate(delta)\n\n\n\nconVTC2IC-&gt;IC\n\n\ninfection(beta)\n\n\n\n\n\n\n\n\nこのモデルは Equation 7 の連立微分方程式によって記述される。Equation 5 に標的細胞数\\(T(t)\\)を加えており、非線形項があるので非線形微分方程式と呼ぶ。\n\n\\(T(t)\\): 感染細胞数\n\\(I(t)\\): 感染細胞数\n\\(V(t)\\): ウイルス量\n\\(\\lambda\\): 標的細胞の供給速度\n\\(d\\): 標的細胞の死亡速度\n\\(p\\): ウイルスの生産速度\n\\(\\delta\\): 免疫による感染細胞の排除速度\n\\(\\beta\\): ウイルスの感染率\n\\(c\\): 自然応答によるウイルスの排除速度\n\n\\[\n\\begin{align}\n&\\frac{\\partial T(t)}{\\partial t} = \\lambda - d T(t) - \\beta T(t) V(t) \\\\\n&\\frac{\\partial I(t)}{\\partial t} = \\beta T(t) V(t) - \\delta I(t) \\\\\n&\\frac{\\partial V(t)}{\\partial t} = p I(t) - c V(t)\n\\end{align}\n\\tag{7}\\]\n非線形微分方程式はほぼ一般解を持たないので、これらの動態は逐次近似法によって計算する。計算結果を描画すると細胞・ウイルスについての動態が観察できる。\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: 非線形微分方程式\n\n\n\n\n\n\n\n参考\n\nウイルス感染の数理モデルとシミュレーション\nOverview of Julia’s SciML/Build and run your first simulation with Julia’s SciML\n\n\n\n\n\nReuseCC BY 4.0"
  }
]